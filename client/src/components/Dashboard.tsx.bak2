import React, { useEffect, useState } from 'react';
import { Link } from 'react-router-dom';

interface User {
  role: string;
  email: string;
}

interface Stats {
  students: number;
  teachers: number;
  batches: number;
  feesCollected: number;
  attendanceToday: number;
  pendingFees: number;
}

interface RecentActivity {
  id: number;
  type: 'attendance' | 'payment' | 'enrollment' | 'message';
  user: string;
  action: string;
  time: string;
}

interface Teacher {
  id: string;
  name: string;
  email: string;
  phone: string;
  subject: string;
  joiningDate: string;
  status: 'active' | 'inactive';
  password?: string; // Only for initial creation
}

const Dashboard: React.FC = () => {
  const [user, setUser] = useState<User | null>(null);
  const [sidebarOpen, setSidebarOpen] = useState(true);
  const [activeTab, setActiveTab] = useState<'dashboard' | 'students' | 'teachers' | 'batches' | 'attendance' | 'fees' | 'reports'>('dashboard');
  
  // Teacher management state
  const [teachers, setTeachers] = useState<Teacher[]>([]);
  const [isAddingTeacher, setIsAddingTeacher] = useState(false);
  const [isEditingTeacher, setIsEditingTeacher] = useState(false);
  const [editTeacherId, setEditTeacherId] = useState<string | null>(null);
  const [newTeacher, setNewTeacher] = useState<Omit<Teacher, 'id'>>({
    name: '',
    email: '',
    phone: '+91 ',
    subject: '',
    joiningDate: new Date().toISOString().split('T')[0],
    status: 'active',
    password: ''
  });
  const [formError, setFormError] = useState('');
  const [showPassword, setShowPassword] = useState(false);
  
  // Example static data
  const stats: Stats = {
    students: 142,
    teachers: 14,
    batches: 12,
    feesCollected: 76500,
    attendanceToday: 89,
    pendingFees: 12800
  };

  const recentActivities: RecentActivity[] = [
    { id: 1, type: 'attendance', user: 'Priya Sharma', action: 'Marked attendance for Batch B4', time: '10 mins ago' },
    { id: 2, type: 'payment', user: 'Rahul Kumar', action: 'Paid ₹3,500 fees', time: '25 mins ago' },
    { id: 3, type: 'enrollment', user: 'Ananya Patel', action: 'Enrolled in Physics Advanced', time: '1 hour ago' },
    { id: 4, type: 'message', user: 'Vikram Singh', action: 'Requested leave for tomorrow', time: '2 hours ago' },
    { id: 5, type: 'payment', user: 'Nisha Verma', action: 'Paid ₹4,800 fees', time: '3 hours ago' },
  ];
  
  useEffect(() => {
    // Get user from localStorage
    const storedUser = localStorage.getItem('user');
    if (storedUser) {
      setUser(JSON.parse(storedUser));
    } else {
      // Redirect to login if not authenticated
      window.location.href = '/login';
    }
    
    // Load teachers from localStorage
    const storedTeachers = localStorage.getItem('teachers');
    if (storedTeachers) {
      setTeachers(JSON.parse(storedTeachers));
    } else {
      // If no teachers exist, create a default one
      const defaultTeacher: Teacher = {
        id: 'T001',
        name: 'Dr. Rajesh Sharma',
        email: 'rajesh@example.com',
        phone: '+91 98765 43210',
        subject: 'Physics',
        joiningDate: '2023-01-15',
        status: 'active',
        password: 'teacher123'
      };
      
      localStorage.setItem('teachers', JSON.stringify([defaultTeacher]));
      setTeachers([defaultTeacher]);
    }
  }, []);

  const handleLogout = () => {
    localStorage.removeItem('user');
    window.location.href = '/login';
  };

  const toggleSidebar = () => {
    setSidebarOpen(!sidebarOpen);
  };
  
  // Teacher management functions
  const handleTeacherInputChange = (e: React.ChangeEvent<HTMLInputElement | HTMLSelectElement>) => {
    const { name, value } = e.target;
    setNewTeacher(prev => ({
      ...prev,
      [name]: value
    }));
  };
  
  const handleAddTeacher = (e: React.FormEvent) => {
    e.preventDefault();
    setFormError('');
    
    // Validate form
    if (!newTeacher.email || !newTeacher.password) {
      setFormError('Email and password are required for teacher login');
      return;
    }
    
    // Check if email already exists when adding new teacher
    if (!isEditingTeacher && teachers.some(t => t.email === newTeacher.email)) {
      setFormError('A teacher with this email already exists');
      return;
    }
    
    if (isEditingTeacher && editTeacherId) {
      // Update existing teacher
      const updatedTeachers = teachers.map(teacher => {
        if (teacher.id === editTeacherId) {
          return {
            ...newTeacher,
            id: editTeacherId
          };
        }
        return teacher;
      });
      
      localStorage.setItem('teachers', JSON.stringify(updatedTeachers));
      setTeachers(updatedTeachers);
      
      // Reset form
      setNewTeacher({
        name: '',
        email: '',
        phone: '+91 ',
        subject: '',
        joiningDate: new Date().toISOString().split('T')[0],
        status: 'active',
        password: ''
      });
      setIsEditingTeacher(false);
      setEditTeacherId(null);
    } else {
      // Create new teacher
      const teacherId = `T${String(teachers.length + 1).padStart(3, '0') : null}`;
      const teacher: Teacher = {
        ...newTeacher,
        id: teacherId
      };
      
      const updatedTeachers = [...teachers, teacher];
      localStorage.setItem('teachers', JSON.stringify(updatedTeachers));
      setTeachers(updatedTeachers);
      
      // Reset form
      setNewTeacher({
        name: '',
        email: '',
        phone: '+91 ',
        subject: '',
        joiningDate: new Date().toISOString().split('T')[0],
        status: 'active',
        password: ''
      });
    }
    
    setIsAddingTeacher(false);
    
    // Update the stats
    stats.teachers = teachers.length + (isEditingTeacher ? 0 : 1);
  };
  
  const editTeacher = (id: string) => {
    const teacher = teachers.find(t => t.id === id);
    if (teacher) {
      setNewTeacher({
        name: teacher.name,
        email: teacher.email,
        phone: teacher.phone,
        subject: teacher.subject,
        joiningDate: teacher.joiningDate,
        status: teacher.status,
        password: teacher.password || ''
      });
      setEditTeacherId(id);
      setIsEditingTeacher(true);
      setIsAddingTeacher(true);
    }
  };
  
  const cancelForm = () => {
    // Reset form
    setNewTeacher({
      name: '',
      email: '',
      phone: '+91 ',
      subject: '',
      joiningDate: new Date().toISOString().split('T')[0],
      status: 'active',
      password: ''
    });
    setIsAddingTeacher(false);
    setIsEditingTeacher(false);
    setEditTeacherId(null);
    setFormError('');
  };
  
  const toggleTeacherStatus = (id: string) => {
    const updatedTeachers = teachers.map(teacher => {
      if (teacher.id === id) {
        return {
          ...teacher,
          status: teacher.status === 'active' ? 'inactive' as const : 'active' as const
        };
      }
      return teacher;
    });
    
    localStorage.setItem('teachers', JSON.stringify(updatedTeachers));
    setTeachers(updatedTeachers);
  };

  const togglePasswordVisibility = () => {
    setShowPassword(!showPassword);
  };

  const removeTeacher = (id: string) => {
    if (window.confirm('Are you sure you want to remove this teacher? This action cannot be undone.')) {
      const updatedTeachers = teachers.filter(teacher => teacher.id !== id);
      localStorage.setItem('teachers', JSON.stringify(updatedTeachers));
      setTeachers(updatedTeachers);
      
      // Update stats
      stats.teachers = updatedTeachers.length;
    }
  };

  if (!user) {
    return (
      <div className="min-h-screen flex items-center justify-center bg-gray-100">
        <div className="animate-spin rounded-full h-12 w-12 border-t-2 border-b-2 border-blue-500"></div>
      </div>
    );
  }

  const iconClass = "h-5 w-5 mr-3";

  return (
    <div className="min-h-screen bg-gray-100 flex">
      {/* Sidebar */}
      <div className={`bg-gray-900 text-white transition-all duration-300 ${sidebarOpen ? 'w-64' : 'w-20'} flex flex-col`}>
        {/* Logo & Toggle */}
        <div className="p-4 flex items-center justify-between border-b border-gray-800">
          {sidebarOpen && (
            <div className="flex items-center">
              <span className="text-xl font-bold text-blue-400">Class</span>
              <span className="text-xl font-bold text-orange-400">entry</span>
            </div>
          ) : null}
          <button 
            onClick={toggleSidebar} 
            className="text-gray-300 hover:text-white p-1"
          >
            {sidebarOpen ? (
              <svg xmlns="http://www.w3.org/2000/svg" className="h-6 w-6" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M11 19l-7-7 7-7m8 14l-7-7 7-7" />
              </svg>
            ) : (
              <svg xmlns="http://www.w3.org/2000/svg" className="h-6 w-6" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M13 5l7 7-7 7M5 5l7 7-7 7" />
              </svg>
            ) : null}
          </button>
        </div>

        {/* Navigation */}
        <nav className="flex-1 py-4">
          <ul className="space-y-1">
            <SidebarItem 
              icon={<svg xmlns="http://www.w3.org/2000/svg" className={iconClass} fill="none" viewBox="0 0 24 24" stroke="currentColor">
                <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M3 12l2-2m0 0l7-7 7 7M5 10v10a1 1 0 001 1h3m10-11l2 2m-2-2v10a1 1 0 01-1 1h-3m-6 0a1 1 0 001-1v-4a1 1 0 011-1h2a1 1 0 011 1v4a1 1 0 001 1m-6 0h6" />
              </svg>} 
              title="Dashboard" 
              active={activeTab === 'dashboard'} 
              onClick={() => setActiveTab('dashboard') : null} 
              collapsed={!sidebarOpen}
            />
            <SidebarItem 
              icon={<svg xmlns="http://www.w3.org/2000/svg" className={iconClass} fill="none" viewBox="0 0 24 24" stroke="currentColor">
                <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M12 4.354a4 4 0 110 5.292M15 21H3v-1a6 6 0 0112 0v1zm0 0h6v-1a6 6 0 00-9-5.197M13 7a4 4 0 11-8 0 4 4 0 018 0z" />
              </svg>} 
              title="Students" 
              active={activeTab === 'students'} 
              onClick={() => setActiveTab('students') : null} 
              collapsed={!sidebarOpen}
            />
            <SidebarItem 
              icon={<svg xmlns="http://www.w3.org/2000/svg" className={iconClass} fill="none" viewBox="0 0 24 24" stroke="currentColor">
                <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M17 20h5v-2a3 3 0 00-5.356-1.857M17 20H7m10 0v-2c0-.656-.126-1.283-.356-1.857M7 20H2v-2a3 3 0 015.356-1.857M7 20v-2c0-.656.126-1.283.356-1.857m0 0a5.002 5.002 0 019.288 0M15 7a3 3 0 11-6 0 3 3 0 016 0zm6 3a2 2 0 11-4 0 2 2 0 014 0zM7 10a2 2 0 11-4 0 2 2 0 014 0z" />
              </svg>} 
              title="Teachers" 
              active={activeTab === 'teachers'} 
              onClick={() => setActiveTab('teachers') : null} 
              collapsed={!sidebarOpen}
            />
            <SidebarItem 
              icon={<svg xmlns="http://www.w3.org/2000/svg" className={iconClass} fill="none" viewBox="0 0 24 24" stroke="currentColor">
                <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M19 11H5m14 0a2 2 0 012 2v6a2 2 0 01-2 2H5a2 2 0 01-2-2v-6a2 2 0 012-2m14 0V9a2 2 0 00-2-2M5 11V9a2 2 0 012-2m0 0V5a2 2 0 012-2h6a2 2 0 012 2M7 7h10" />
              </svg>} 
              title="Batches" 
              active={activeTab === 'batches'} 
              onClick={() => setActiveTab('batches') : null} 
              collapsed={!sidebarOpen}
            />
            <SidebarItem 
              icon={<svg xmlns="http://www.w3.org/2000/svg" className={iconClass} fill="none" viewBox="0 0 24 24" stroke="currentColor">
                <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M9 5H7a2 2 0 00-2 2v12a2 2 0 002 2h10a2 2 0 002-2V7a2 2 0 00-2-2h-2M9 5a2 2 0 002 2h2a2 2 0 002-2M9 5a2 2 0 012-2h2a2 2 0 012 2m-6 9l2 2 4-4" />
              </svg>} 
              title="Attendance" 
              active={activeTab === 'attendance'} 
              onClick={() => setActiveTab('attendance') : null} 
              collapsed={!sidebarOpen}
            />
            <SidebarItem 
              icon={<svg xmlns="http://www.w3.org/2000/svg" className={iconClass} fill="none" viewBox="0 0 24 24" stroke="currentColor">
                <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M12 8c-1.657 0-3 .895-3 2s1.343 2 3 2 3 .895 3 2-1.343 2-3 2m0-8c1.11 0 2.08.402 2.599 1M12 8V7m0 1v8m0 0v1m0-1c-1.11 0-2.08-.402-2.599-1M21 12a9 9 0 11-18 0 9 9 0 0118 0z" />
              </svg>} 
              title="Fees" 
              active={activeTab === 'fees'} 
              onClick={() => setActiveTab('fees') : null} 
              collapsed={!sidebarOpen}
            />
            <SidebarItem 
              icon={<svg xmlns="http://www.w3.org/2000/svg" className={iconClass} fill="none" viewBox="0 0 24 24" stroke="currentColor">
                <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M9 19v-6a2 2 0 00-2-2H5a2 2 0 00-2 2v6a2 2 0 002 2h2a2 2 0 002-2zm0 0V9a2 2 0 012-2h2a2 2 0 012 2v10m-6 0a2 2 0 002 2h2a2 2 0 002-2m0 0V5a2 2 0 012-2h2a2 2 0 012 2v14a2 2 0 01-2 2h-2a2 2 0 01-2-2z" />
              </svg>} 
              title="Reports" 
              active={activeTab === 'reports'} 
              onClick={() => setActiveTab('reports') : null} 
              collapsed={!sidebarOpen}
            />
          </ul>
        </nav>

        {/* User Profile */}
        <div className="border-t border-gray-800 p-4">
          {sidebarOpen ? (
            <div className="flex items-center space-x-3">
              <div className="h-10 w-10 rounded-full bg-blue-600 flex items-center justify-center text-white font-semibold">
                {user.email.substring(0, 1).toUpperCase() : null}
              </div>
              <div>
                <p className="text-sm font-medium">{user.email}</p>
                <p className="text-xs text-gray-400 capitalize">{user.role}</p>
              </div>
            </div>
          ) : (
            <div className="flex justify-center">
              <div className="h-10 w-10 rounded-full bg-blue-600 flex items-center justify-center text-white font-semibold">
                {user.email.substring(0, 1).toUpperCase() : null}
              </div>
            </div>
          ) : null}
        </div>
      </div>

      {/* Main Content */}
      <div className="flex-1 flex flex-col overflow-hidden">
        {/* Top Header */}
        <header className="bg-white shadow-sm border-b border-gray-200">
          <div className="flex items-center justify-between p-4">
            <div className="flex items-center space-x-4">
              <h1 className="text-xl font-semibold text-gray-800">Admin Dashboard</h1>
              <div className="hidden md:flex items-center text-sm text-gray-600">
                <span>{new Date().toLocaleDateString('en-US', { weekday: 'long', year: 'numeric', month: 'long', day: 'numeric' }) : null}</span>
              </div>
            </div>

            <div className="flex items-center space-x-4">
              <button className="relative p-1 text-gray-500 hover:text-gray-700 focus:outline-none">
                <svg xmlns="http://www.w3.org/2000/svg" className="h-6 w-6" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                  <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M15 17h5l-1.405-1.405A2.032 2.032 0 0118 14.158V11a6.002 6.002 0 00-4-5.659V5a2 2 0 10-4 0v.341C7.67 6.165 6 8.388 6 11v3.159c0 .538-.214 1.055-.595 1.436L4 17h5m6 0v1a3 3 0 11-6 0v-1m6 0H9" />
                </svg>
                <span className="absolute top-0 right-0 w-2 h-2 bg-red-500 rounded-full"></span>
              </button>
              <button 
                onClick={handleLogout}
                className="px-4 py-2 text-sm text-red-600 hover:text-red-800 font-medium flex items-center"
              >
                <svg xmlns="http://www.w3.org/2000/svg" className="h-5 w-5 mr-2" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                  <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M17 16l4-4m0 0l-4-4m4 4H7m6 4v1a3 3 0 01-3 3H6a3 3 0 01-3-3V7a3 3 0 013-3h4a3 3 0 013 3v1" />
                </svg>
                Logout
              </button>
            </div>
          </div>
        </header>

        {/* Dashboard Content */}
        <main className="flex-1 overflow-y-auto p-4 bg-gray-50">
          {activeTab === 'dashboard' && (
            <>
              {/* Welcome Banner */}
              <div className="bg-white rounded-lg shadow-sm mb-6 p-6 border-l-4 border-blue-500">
                <div className="flex flex-col md:flex-row justify-between items-start md:items-center">
                  <div>
                    <h2 className="text-2xl font-bold text-gray-800">Welcome back, Admin!</h2>
                    <p className="text-gray-600 mt-1">Here's what's happening with your institute today.</p>
                  </div>
                  <div className="mt-4 md:mt-0">
                    <button className="bg-blue-500 hover:bg-blue-600 text-white px-4 py-2 rounded-md text-sm font-medium transition-colors">
                      Generate Report
                    </button>
                  </div>
                </div>
              </div>

              {/* Stats Cards */}
              <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6 mb-6">
                <StatCard 
                  title="Total Students" 
                  value={stats.students} 
                  trend="+12% from last month" 
                  icon={<svg xmlns="http://www.w3.org/2000/svg" className="h-8 w-8 text-blue-500" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                    <path d="M12 14l9-5-9-5-9 5 9 5z" />
                    <path d="M12 14l6.16-3.422a12.083 12.083 0 01.665 6.479A11.952 11.952 0 0012 20.055a11.952 11.952 0 00-6.824-2.998 12.078 12.078 0 01.665-6.479L12 14z" />
                    <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M12 14l9-5-9-5-9 5 9 5zm0 0l6.16-3.422a12.083 12.083 0 01.665 6.479A11.952 11.952 0 0012 20.055a11.952 11.952 0 00-6.824-2.998 12.078 12.078 0 01.665-6.479L12 14zm-4 6v-7.5l4-2.222" />
                  </svg>} 
                />
                <StatCard 
                  title="Attendance Today" 
                  value={`${stats.attendanceToday}%`} 
                  trend="+3% from yesterday" 
                  icon={<svg xmlns="http://www.w3.org/2000/svg" className="h-8 w-8 text-green-500" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                    <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M9 5H7a2 2 0 00-2 2v12a2 2 0 002 2h10a2 2 0 002-2V7a2 2 0 00-2-2h-2M9 5a2 2 0 002 2h2a2 2 0 002-2M9 5a2 2 0 012-2h2a2 2 0 012 2m-6 9l2 2 4-4" />
                  </svg>} 
                />
                <StatCard 
                  title="Fees Collected" 
                  value={`₹${stats.feesCollected.toLocaleString() : null}`} 
                  trend="+21% from last month" 
                  icon={<svg xmlns="http://www.w3.org/2000/svg" className="h-8 w-8 text-yellow-500" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                    <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M12 8c-1.657 0-3 .895-3 2s1.343 2 3 2 3 .895 3 2-1.343 2-3 2m0-8c1.11 0 2.08.402 2.599 1M12 8V7m0 1v8m0 0v1m0-1c-1.11 0-2.08-.402-2.599-1M21 12a9 9 0 11-18 0 9 9 0 0118 0z" />
                  </svg>} 
                />
                <StatCard 
                  title="Pending Fees" 
                  value={`₹${stats.pendingFees.toLocaleString() : null}`} 
                  trend="-5% from last month" 
                  icon={<svg xmlns="http://www.w3.org/2000/svg" className="h-8 w-8 text-red-500" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                    <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M12 8v4m0 4h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z" />
                  </svg>} 
                />
                <StatCard 
                  title="Total Teachers" 
                  value={stats.teachers} 
                  trend="+2 new hires" 
                  icon={<svg xmlns="http://www.w3.org/2000/svg" className="h-8 w-8 text-indigo-500" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                    <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M19 20H5a2 2 0 01-2-2V6a2 2 0 012-2h10a2 2 0 012 2v1m2 13a2 2 0 01-2-2V7m2 13a2 2 0 002-2V9a2 2 0 00-2-2h-2m-4-3H9M7 16h6M7 8h6v4H7V8z" />
                  </svg>} 
                />
                <StatCard 
                  title="Active Batches" 
                  value={stats.batches} 
                  trend="+3 new batches" 
                  icon={<svg xmlns="http://www.w3.org/2000/svg" className="h-8 w-8 text-purple-500" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                    <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M19 11H5m14 0a2 2 0 012 2v6a2 2 0 01-2 2H5a2 2 0 01-2-2v-6a2 2 0 012-2m14 0V9a2 2 0 00-2-2M5 11V9a2 2 0 012-2m0 0V5a2 2 0 012-2h6a2 2 0 012 2v2M7 7h10" />
                  </svg>} 
                />
              </div>

              {/* Activity and Calendar Section */}
              <div className="grid grid-cols-1 lg:grid-cols-3 gap-6">
                {/* Recent Activity */}
                <div className="lg:col-span-2 bg-white rounded-lg shadow-sm p-6 border border-gray-200">
                  <div className="flex justify-between items-center mb-4">
                    <h3 className="text-lg font-semibold text-gray-800">Recent Activity</h3>
                    <button className="text-sm text-blue-600 hover:text-blue-800">View All</button>
                  </div>
                  <div className="space-y-4">
                    {recentActivities.map(activity => (
                      <div key={activity.id} className="flex items-start border-b border-gray-100 pb-4">
                        <div className="flex-shrink-0 rounded-full p-2 mr-3 bg-blue-50">
                          {activity.type === 'attendance' && (
                            <svg xmlns="http://www.w3.org/2000/svg" className="h-5 w-5 text-blue-500" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                              <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M9 5H7a2 2 0 00-2 2v12a2 2 0 002 2h10a2 2 0 002-2V7a2 2 0 00-2-2h-2M9 5a2 2 0 002 2h2a2 2 0 002-2M9 5a2 2 0 012-2h2a2 2 0 012 2m-6 9l2 2 4-4" />
                            </svg>
                          ) : null}
                          {activity.type === 'payment' && (
                            <svg xmlns="http://www.w3.org/2000/svg" className="h-5 w-5 text-green-500" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                              <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M12 8c-1.657 0-3 .895-3 2s1.343 2 3 2 3 .895 3 2-1.343 2-3 2m0-8c1.11 0 2.08.402 2.599 1M12 8V7m0 1v8m0 0v1m0-1c-1.11 0-2.08-.402-2.599-1M21 12a9 9 0 11-18 0 9 9 0 0118 0z" />
                            </svg>
                          ) : null}
                          {activity.type === 'enrollment' && (
                            <svg xmlns="http://www.w3.org/2000/svg" className="h-5 w-5 text-purple-500" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                              <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M18 9v3m0 0v3m0-3h3m-3 0h-3m-2-5a4 4 0 11-8 0 4 4 0 018 0zM3 20a6 6 0 0112 0v1H3v-1z" />
                            </svg>
                          ) : null}
                          {activity.type === 'message' && (
                            <svg xmlns="http://www.w3.org/2000/svg" className="h-5 w-5 text-yellow-500" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                              <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M8 10h.01M12 10h.01M16 10h.01M9 16H5a2 2 0 01-2-2V6a2 2 0 012-2h14a2 2 0 012 2v8a2 2 0 01-2 2h-5l-5 5v-5z" />
                            </svg>
                          ) : null}
                        </div>
                        <div className="flex-grow">
                          <h4 className="text-sm font-medium text-gray-800">{activity.user}</h4>
                          <p className="text-sm text-gray-600">{activity.action}</p>
                          <span className="text-xs text-gray-500">{activity.time}</span>
                        </div>
                      </div>
                    )) : null}
                  </div>
                </div>

                {/* Quick Actions */}
                <div className="bg-white rounded-lg shadow-sm p-6 border border-gray-200">
                  <h3 className="text-lg font-semibold text-gray-800 mb-4">Quick Actions</h3>
                  <div className="space-y-3">
                    <QuickActionButton 
                      title="Mark Attendance" 
                      icon={<svg xmlns="http://www.w3.org/2000/svg" className="h-5 w-5" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                        <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M9 5H7a2 2 0 00-2 2v12a2 2 0 002 2h10a2 2 0 002-2V7a2 2 0 00-2-2h-2M9 5a2 2 0 002 2h2a2 2 0 002-2M9 5a2 2 0 012-2h2a2 2 0 012 2m-6 9l2 2 4-4" />
                      </svg>} 
                    />
                    <QuickActionButton 
                      title="Collect Fee" 
                      icon={<svg xmlns="http://www.w3.org/2000/svg" className="h-5 w-5" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                        <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M12 8c-1.657 0-3 .895-3 2s1.343 2 3 2 3 .895 3 2-1.343 2-3 2m0-8c1.11 0 2.08.402 2.599 1M12 8V7m0 1v8m0 0v1m0-1c-1.11 0-2.08-.402-2.599-1M21 12a9 9 0 11-18 0 9 9 0 0118 0z" />
                      </svg>} 
                    />
                    <QuickActionButton 
                      title="Add Student" 
                      icon={<svg xmlns="http://www.w3.org/2000/svg" className="h-5 w-5" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                        <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M18 9v3m0 0v3m0-3h3m-3 0h-3m-2-5a4 4 0 11-8 0 4 4 0 018 0zM3 20a6 6 0 0112 0v1H3v-1z" />
                      </svg>} 
                    />
                    <QuickActionButton 
                      title="Send Notification" 
                      icon={<svg xmlns="http://www.w3.org/2000/svg" className="h-5 w-5" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                        <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M15 17h5l-1.405-1.405A2.032 2.032 0 0118 14.158V11a6.002 6.002 0 00-4-5.659V5a2 2 0 10-4 0v.341C7.67 6.165 6 8.388 6 11v3.159c0 .538-.214 1.055-.595 1.436L4 17h5m6 0v1a3 3 0 11-6 0v-1m6 0H9" />
                      </svg>} 
                    />
                    <QuickActionButton 
                      title="Create Report" 
                      icon={<svg xmlns="http://www.w3.org/2000/svg" className="h-5 w-5" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                        <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M9 17v-2m3 2v-4m3 4v-6m2 10H7a2 2 0 01-2-2V5a2 2 0 012-2h5.586a1 1 0 01.707.293l5.414 5.414a1 1 0 01.293.707V19a2 2 0 01-2 2z" />
                      </svg>} 
                    />
                  </div>

                  {/* Upcoming Events */}
                  <div className="mt-6 pt-6 border-t border-gray-200">
                    <h3 className="text-lg font-semibold text-gray-800 mb-4">Upcoming Events</h3>
                    <div className="space-y-3">
                      <div className="p-3 bg-blue-50 text-blue-800 rounded-md">
                        <div className="flex items-center justify-between">
                          <div className="text-sm font-medium">Physics Test</div>
                          <div className="text-xs">Tomorrow</div>
                        </div>
                        <div className="text-xs mt-1">Batch B3 - 10:00 AM</div>
                      </div>
                      <div className="p-3 bg-green-50 text-green-800 rounded-md">
                        <div className="flex items-center justify-between">
                          <div className="text-sm font-medium">Parent-Teacher Meeting</div>
                          <div className="text-xs">May 25</div>
                        </div>
                        <div className="text-xs mt-1">All Batches - 04:00 PM</div>
                      </div>
                    </div>
                  </div>
                </div>
              </div>
            </>
          ) : null}

          {/* Other tabs like students, teachers, etc. would be rendered here */}
          {activeTab === 'teachers' && (
            <div className="bg-white rounded-lg shadow-sm p-6">
              <div className="flex justify-between items-center mb-6">
                <h2 className="text-xl font-semibold text-gray-800">Teacher Management</h2>
                {!isAddingTeacher && (
                  <button 
                    onClick={() => setIsAddingTeacher(true) : null}
                    className="bg-blue-600 hover:bg-blue-700 text-white px-4 py-2 rounded-md text-sm font-medium transition-colors flex items-center"
                  >
                    <svg xmlns="http://www.w3.org/2000/svg" className="h-5 w-5 mr-2" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                      <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M12 6v6m0 0v6m0-6h6m-6 0H6" />
                    </svg>
                    Add New Teacher
                  </button>
                ) : null}
              </div>
              
              {isAddingTeacher ? (
                <div className="bg-white rounded-lg p-6 mb-6 border border-gray-200 shadow-md">
                  <div className="border-b border-gray-200 pb-4 mb-6">
                    <div className="flex justify-between items-center">
                      <h3 className="text-lg font-medium text-gray-800 flex items-center">
                        <svg xmlns="http://www.w3.org/2000/svg" className="h-6 w-6 mr-2 text-blue-500" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                          <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M18 9v3m0 0v3m0-3h3m-3 0h-3m-2-5a4 4 0 11-8 0 4 4 0 018 0zM3 20a6 6 0 0112 0v1H3v-1z" />
                        </svg>
                        {isEditingTeacher ? 'Edit Teacher' : 'Add New Teacher'}
                      </h3>
                      <button
                        onClick={cancelForm}
                        className="text-gray-500 hover:text-gray-700 transition-colors bg-gray-100 hover:bg-gray-200 rounded-full p-2"
                      >
                        <svg xmlns="http://www.w3.org/2000/svg" className="h-5 w-5" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                          <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M6 18L18 6M6 6l12 12" />
                        </svg>
                      </button>
                    </div>
                    <p className="mt-1 text-sm text-gray-500">
                      {isEditingTeacher ? 
                        'Update the teacher details. Email and password are required for login.' : 
                        'Fill in the details to add a new teacher to the platform. Email and password are required for login.'}
                    </p>
                  </div>
                  
                  {formError && (
                    <div className="mb-6 bg-red-100 border-l-4 border-red-500 text-red-700 p-4 rounded shadow-sm">
                      <div className="flex">
                        <svg xmlns="http://www.w3.org/2000/svg" className="h-5 w-5 mr-2" viewBox="0 0 20 20" fill="currentColor">
                          <path fillRule="evenodd" d="M18 10a8 8 0 11-16 0 8 8 0 0116 0zm-7 4a1 1 0 11-2 0 1 1 0 012 0zm-1-9a1 1 0 00-1 1v4a1 1 0 102 0V6a1 1 0 00-1-1z" clipRule="evenodd" />
                        </svg>
                        {formError}
                      </div>
                    </div>
                  ) : null}
                  
                  <form onSubmit={handleAddTeacher} className="space-y-6">
                    <div className="grid grid-cols-1 md:grid-cols-2 gap-x-8 gap-y-6">
                      <div className="space-y-1">
                        <label htmlFor="name" className="block text-sm font-medium text-gray-700">
                          Full Name <span className="text-gray-400">(optional)</span>
                        </label>
                        <div className="mt-1 relative rounded-md shadow-sm">
                          <div className="absolute inset-y-0 left-0 pl-3 flex items-center pointer-events-none">
                            <svg xmlns="http://www.w3.org/2000/svg" className="h-5 w-5 text-gray-400" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                              <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M16 7a4 4 0 11-8 0 4 4 0 018 0zM12 14a7 7 0 00-7 7h14a7 7 0 00-7-7z" />
                            </svg>
                          </div>
                          <input
                            type="text"
                            id="name"
                            name="name"
                            value={newTeacher.name}
                            onChange={handleTeacherInputChange}
                            className="focus:ring-blue-500 focus:border-blue-500 block w-full pl-10 pr-3 py-2.5 sm:text-sm border-gray-300 rounded-md"
                            placeholder="John Doe"
                          />
                        </div>
                      </div>
                      
                      <div className="space-y-1">
                        <label htmlFor="email" className="block text-sm font-medium text-gray-700">
                          Email Address <span className="text-red-500">*</span>
                        </label>
                        <div className="mt-1 relative rounded-md shadow-sm">
                          <div className="absolute inset-y-0 left-0 pl-3 flex items-center pointer-events-none">
                            <svg xmlns="http://www.w3.org/2000/svg" className="h-5 w-5 text-gray-400" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                              <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M16 12a4 4 0 10-8 0 4 4 0 008 0zm0 0v1.5a2.5 2.5 0 005 0V12a9 9 0 10-9 9m4.5-1.206a8.959 8.959 0 01-4.5 1.207" />
                            </svg>
                          </div>
                          <input
                            type="email"
                            id="email"
                            name="email"
                            value={newTeacher.email}
                            onChange={handleTeacherInputChange}
                            className="focus:ring-blue-500 focus:border-blue-500 block w-full pl-10 pr-3 py-2.5 sm:text-sm border-gray-300 rounded-md"
                            placeholder="teacher@example.com"
                            required
                          />
                        </div>
                        <p className="mt-1 text-xs text-blue-600">This will be used as the login ID</p>
                      </div>
                      
                      <div className="space-y-1">
                        <label htmlFor="phone" className="block text-sm font-medium text-gray-700">
                          Phone Number <span className="text-gray-400">(optional)</span>
                        </label>
                        <div className="mt-1 relative rounded-md shadow-sm">
                          <div className="absolute inset-y-0 left-0 pl-3 flex items-center pointer-events-none">
                            <svg xmlns="http://www.w3.org/2000/svg" className="h-5 w-5 text-gray-400" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                              <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M3 5a2 2 0 012-2h3.28a1 1 0 01.948.684l1.498 4.493a1 1 0 01-.502 1.21l-2.257 1.13a11.042 11.042 0 005.516 5.516l1.13-2.257a1 1 0 011.21-.502l4.493 1.498a1 1 0 01.684.949V19a2 2 0 01-2 2h-1C9.716 21 3 14.284 3 6V5z" />
                            </svg>
                          </div>
                          <input
                            type="tel"
                            id="phone"
                            name="phone"
                            value={newTeacher.phone}
                            onChange={handleTeacherInputChange}
                            className="focus:ring-blue-500 focus:border-blue-500 block w-full pl-10 pr-3 py-2.5 sm:text-sm border-gray-300 rounded-md"
                            placeholder="+91 98765 43210"
                          />
                        </div>
                      </div>
                      
                      <div className="space-y-1">
                        <label htmlFor="subject" className="block text-sm font-medium text-gray-700">
                          Subject <span className="text-gray-400">(optional)</span>
                        </label>
                        <div className="mt-1 relative rounded-md shadow-sm">
                          <div className="absolute inset-y-0 left-0 pl-3 flex items-center pointer-events-none">
                            <svg xmlns="http://www.w3.org/2000/svg" className="h-5 w-5 text-gray-400" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                              <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M12 6.253v13m0-13C10.832 5.477 9.246 5 7.5 5S4.168 5.477 3 6.253v13C4.168 18.477 5.754 18 7.5 18s3.332.477 4.5 1.253m0-13C13.168 5.477 14.754 5 16.5 5c1.747 0 3.332.477 4.5 1.253v13C19.832 18.477 18.247 18 16.5 18c-1.746 0-3.332.477-4.5 1.253" />
                            </svg>
                          </div>
                          <input
                            type="text"
                            id="subject"
                            name="subject"
                            value={newTeacher.subject}
                            onChange={handleTeacherInputChange}
                            className="focus:ring-blue-500 focus:border-blue-500 block w-full pl-10 pr-3 py-2.5 sm:text-sm border-gray-300 rounded-md"
                            placeholder="Physics, Mathematics, etc."
                          />
                        </div>
                      </div>
                      
                      <div className="space-y-1">
                        <label htmlFor="joiningDate" className="block text-sm font-medium text-gray-700">
                          Joining Date <span className="text-gray-400">(optional)</span>
                        </label>
                        <div className="mt-1 relative rounded-md shadow-sm">
                          <div className="absolute inset-y-0 left-0 pl-3 flex items-center pointer-events-none">
                            <svg xmlns="http://www.w3.org/2000/svg" className="h-5 w-5 text-gray-400" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                              <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M8 7V3m8 4V3m-9 8h10M5 21h14a2 2 0 002-2V7a2 2 0 00-2-2H5a2 2 0 00-2 2v12a2 2 0 002 2z" />
                            </svg>
                          </div>
                          <input
                            type="date"
                            id="joiningDate"
                            name="joiningDate"
                            value={newTeacher.joiningDate}
                            onChange={handleTeacherInputChange}
                            className="focus:ring-blue-500 focus:border-blue-500 block w-full pl-10 pr-3 py-2.5 sm:text-sm border-gray-300 rounded-md"
                          />
                        </div>
                      </div>
                      
                      <div className="space-y-1">
                        <label htmlFor="password" className="block text-sm font-medium text-gray-700">
                          Password <span className="text-red-500">*</span>
                        </label>
                        <div className="mt-1 relative rounded-md shadow-sm">
                          <div className="absolute inset-y-0 left-0 pl-3 flex items-center pointer-events-none">
                            <svg xmlns="http://www.w3.org/2000/svg" className="h-5 w-5 text-gray-400" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                              <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M12 15v2m-6 4h12a2 2 0 002-2v-6a2 2 0 00-2-2H6a2 2 0 00-2 2v6a2 2 0 002 2zm10-10V7a4 4 0 00-8 0v4h8z" />
                            </svg>
                          </div>
                          <input
                            type={showPassword ? "text" : "password"}
                            id="password"
                            name="password"
                            value={newTeacher.password || ''}
                            onChange={handleTeacherInputChange}
                            className="focus:ring-blue-500 focus:border-blue-500 block w-full pl-10 pr-10 py-2.5 sm:text-sm border-gray-300 rounded-md"
                            placeholder="••••••••"
                            required
                          />
                          <div className="absolute inset-y-0 right-0 pr-3 flex items-center">
                            <button
                              type="button"
                              onClick={togglePasswordVisibility}
                              className="text-gray-400 hover:text-gray-600 focus:outline-none"
                            >
                              {showPassword ? (
                                <svg xmlns="http://www.w3.org/2000/svg" className="h-5 w-5" viewBox="0 0 20 20" fill="currentColor">
                                  <path fillRule="evenodd" d="M3.707 2.293a1 1 0 00-1.414 1.414l14 14a1 1 0 001.414-1.414l-1.473-1.473A10.014 10.014 0 0019.542 10C18.268 5.943 14.478 3 10 3a9.958 9.958 0 00-4.512 1.074l-1.78-1.781zm4.261 4.26l1.514 1.515a2.003 2.003 0 012.45 2.45l1.514 1.514a4 4 0 00-5.478-5.478z" clipRule="evenodd" />
                                  <path d="M12.454 16.697L9.75 13.992a4 4 0 01-3.742-3.741L2.335 6.578A9.98 9.98 0 00.458 10c1.274 4.057 5.065 7 9.542 7 .847 0 1.669-.105 2.454-.303z" />
                                </svg>
                              ) : (
                                <svg xmlns="http://www.w3.org/2000/svg" className="h-5 w-5" viewBox="0 0 20 20" fill="currentColor">
                                  <path d="M10 12a2 2 0 100-4 2 2 0 000 4z" />
                                  <path fillRule="evenodd" d="M.458 10C1.732 5.943 5.522 3 10 3s8.268 2.943 9.542 7c-1.274 4.057-5.064 7-9.542 7S1.732 14.057.458 10zM14 10a4 4 0 11-8 0 4 4 0 018 0z" clipRule="evenodd" />
                                </svg>
                              ) : null}
                            </button>
                          </div>
                        </div>
                        <p className="mt-1 text-xs text-blue-600">This will be used for login authentication</p>
                      </div>
                    </div>
                    
                    <div className="pt-6 border-t border-gray-200 mt-6">
                      <div className="flex items-center justify-between">
                        <span className="text-sm text-gray-500">* Required fields for login</span>
                        <div className="flex items-center space-x-3">
                          <button
                            type="button"
                            onClick={cancelForm}
                            className="px-4 py-2.5 border border-gray-300 rounded-md shadow-sm text-sm font-medium text-gray-700 bg-white hover:bg-gray-50 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500 transition-colors"
                          >
                            Cancel
                          </button>
                          <button
                            type="submit"
                            className="px-6 py-2.5 border border-transparent rounded-md shadow-sm text-sm font-medium text-white bg-blue-600 hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500 transition-colors flex items-center"
                          >
                            {isEditingTeacher ? (
                              <>
                                <svg xmlns="http://www.w3.org/2000/svg" className="h-5 w-5 mr-2" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                                  <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M11 5H6a2 2 0 00-2 2v11a2 2 0 002 2h11a2 2 0 002-2v-5m-1.414-9.414a2 2 0 112.828 2.828L11.828 15H9v-2.828l8.586-8.586z" />
                                </svg>
                                Update Teacher
                              </>
                            ) : (
                              <>
                                <svg xmlns="http://www.w3.org/2000/svg" className="h-5 w-5 mr-2" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                                  <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M12 6v6m0 0v6m0-6h6m-6 0H6" />
                                </svg>
                                Add Teacher
                              </>
                            ) : null}
                          </button>
                        </div>
                      </div>
                    </div>
                  </form>
                </div>
              ) : null}
              
              <div className="border-t border-gray-200 pt-6">
                <h3 className="text-lg font-medium text-gray-800 mb-4">Teacher Login Access</h3>
                <div className="bg-gray-50 p-4 rounded-md border border-gray-200">
                  <p className="text-sm text-gray-600 mb-4">
                    <strong>Important:</strong> Teachers can log in using their email address and password. Only these two fields are required for login.
                  </p>
                  <ol className="list-decimal list-inside space-y-2 text-sm text-gray-600">
                    <li>Email address serves as the unique login ID</li>
                    <li>Password is used for authentication</li>
                    <li>Other details (name, phone, subject) are optional and can be added later</li>
                  </ol>
                  <div className="mt-4 p-3 bg-blue-50 border border-blue-200 rounded text-blue-800 text-sm">
                    <div className="font-medium">Sample Login:</div>
                    <div className="mt-1">Email: <span className="font-mono">{teachers[0]?.email || 'rajesh@example.com'}</span></div>
                    <div>Password: <span className="font-mono">{teachers[0]?.password || 'teacher123'}</span></div>
                  </div>
                </div>
              </div>
            </div>
          ) : null}
          
          {activeTab !== 'dashboard' && activeTab !== 'teachers' && (
            <div className="bg-white rounded-lg shadow-sm p-6 min-h-[50vh] flex items-center justify-center">
              <div className="text-center">
                <h3 className="text-lg font-medium text-gray-800 mb-2">{activeTab.charAt(0).toUpperCase() + activeTab.slice(1) : null} Module</h3>
                <p className="text-gray-600">This module is under development. Coming soon!</p>
              </div>
            </div>
          ) : null}
        </main>

        {/* Footer */}
        <footer className="bg-white border-t border-gray-200 p-4">
          <div className="max-w-7xl mx-auto">
            <div className="flex flex-col md:flex-row justify-between items-center">
              <div className="text-sm text-gray-600">
                © 2023 Classentry Management System. All rights reserved.
              </div>
              <div className="mt-2 md:mt-0 text-sm text-gray-500">
                Version 1.0.0
              </div>
            </div>
          </div>
        </footer>
      </div>
    </div>
  );
};

interface SidebarItemProps {
  icon: React.ReactNode;
  title: string;
  active: boolean;
  onClick: () => void;
  collapsed: boolean;
}

const SidebarItem: React.FC<SidebarItemProps> = ({ icon, title, active, onClick, collapsed }) => {
  return (
    <li>
      <button
        onClick={onClick}
        className={`flex items-center w-full px-4 py-3 transition-colors ${
          active 
            ? 'bg-blue-600 text-white' 
            : 'text-gray-300 hover:bg-gray-800 hover:text-white'
        }`}
      >
        {icon}
        {!collapsed && <span>{title}</span>}
      </button>
    </li>
  );
};

interface StatCardProps {
  title: string;
  value: string | number;
  trend: string;
  icon: React.ReactNode;
}

const StatCard: React.FC<StatCardProps> = ({ title, value, trend, icon }) => {
  return (
    <div className="bg-white rounded-lg shadow-sm p-6 border border-gray-200 hover:shadow-md transition-shadow">
      <div className="flex items-center">
        <div className="mr-4">
          {icon}
        </div>
        <div>
          <p className="text-sm font-medium text-gray-600">{title}</p>
          <h3 className="text-2xl font-bold text-gray-900">{value}</h3>
          <p className="text-xs text-gray-500 mt-1">{trend}</p>
        </div>
      </div>
    </div>
  );
};

interface QuickActionButtonProps {
  title: string;
  icon: React.ReactNode;
}

const QuickActionButton: React.FC<QuickActionButtonProps> = ({ title, icon }) => {
  return (
    <button 
      className="flex items-center w-full p-3 text-gray-700 hover:bg-gray-50 border border-gray-200 rounded-md transition-colors"
      onClick={() => alert(`${title} action (not implemented in demo)`) : null}
    >
      <span className="mr-3 text-blue-500">{icon}</span>
      <span className="text-sm font-medium">{title}</span>
    </button>
  );
};

export default Dashboard; 
